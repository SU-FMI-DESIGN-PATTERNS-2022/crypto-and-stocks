// Code generated by MockGen. DO NOT EDIT.
// Source: repository_controller.go

// Package mock_prices is a generated GoMock package.
package mock_prices

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	database "github.com/SU-FMI-DESIGN-PATTERNS-2022/crypto-and-stocks/pkg/repository/mongo/database"
)

// MockPricesRepository is a mock of PricesRepository interface.
type MockPricesRepository[P database.CryptoPrices | database.StockPrices] struct {
	ctrl     *gomock.Controller
	recorder *MockPricesRepositoryMockRecorder[P]
}

// MockPricesRepositoryMockRecorder is the mock recorder for MockPricesRepository.
type MockPricesRepositoryMockRecorder[P database.CryptoPrices | database.StockPrices] struct {
	mock *MockPricesRepository[P]
}

// NewMockPricesRepository creates a new mock instance.
func NewMockPricesRepository[P database.CryptoPrices | database.StockPrices](ctrl *gomock.Controller) *MockPricesRepository[P] {
	mock := &MockPricesRepository[P]{ctrl: ctrl}
	mock.recorder = &MockPricesRepositoryMockRecorder[P]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPricesRepository[P]) EXPECT() *MockPricesRepositoryMockRecorder[P] {
	return m.recorder
}

// StoreEntry mocks base method.
func (m *MockPricesRepository[P]) StoreEntry(prices P) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEntry", prices)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEntry indicates an expected call of StoreEntry.
func (mr *MockPricesRepositoryMockRecorder[P]) StoreEntry(prices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEntry", reflect.TypeOf((*MockPricesRepository[P])(nil).StoreEntry), prices)
}

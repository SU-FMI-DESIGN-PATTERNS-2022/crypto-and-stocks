// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mock_stream is a generated GoMock package.
package mock_stream

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventBus is a mock of EventBus interface.
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus.
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance.
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEventBus) Publish(topic string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{topic}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Publish", varargs...)
}

// Publish indicates an expected call of Publish.
func (mr *MockEventBusMockRecorder) Publish(topic interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{topic}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBus)(nil).Publish), varargs...)
}

// MockPriceStream is a mock of PriceStream interface.
type MockPriceStream struct {
	ctrl     *gomock.Controller
	recorder *MockPriceStreamMockRecorder
}

// MockPriceStreamMockRecorder is the mock recorder for MockPriceStream.
type MockPriceStreamMockRecorder struct {
	mock *MockPriceStream
}

// NewMockPriceStream creates a new mock instance.
func NewMockPriceStream(ctrl *gomock.Controller) *MockPriceStream {
	mock := &MockPriceStream{ctrl: ctrl}
	mock.recorder = &MockPriceStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceStream) EXPECT() *MockPriceStreamMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockPriceStream) Start(msgHandler func([]byte)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", msgHandler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPriceStreamMockRecorder) Start(msgHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPriceStream)(nil).Start), msgHandler)
}

// Stop mocks base method.
func (m *MockPriceStream) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockPriceStreamMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPriceStream)(nil).Stop))
}
